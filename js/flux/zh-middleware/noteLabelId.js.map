{"version":3,"sources":["../../../src/flux/zh-middleware/noteLabelId.js"],"names":["_fIsLabel","item","_","title","color","_crLabels","hmLabel","labels","labelsTo","newLabels","Array","isArray","_arrLabels","forEach","id","push","_label","find","CONF","NLABELS_PREFIX","noteLabelIdMiddleware","getState","dispatch","next","action","type","NA","EDIT_NOTE_LABELS","hmLabels","sNoteLabel"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;AAAA,SAAU,UAAAC,CAAC;AAAA,WAC3BA,CAAC,CAACC,KAAF,KAAYF,IAAI,CAACE,KAAjB,IACGD,CAAC,CAACE,KAAF,KAAYH,IAAI,CAACG,KAFO;AAAA,GAAX;AAAA,CAAlB;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,MAAMC,QAAQ,GAAG,EAAjB;AAAA,MACKC,SAAS,GAAG,EADjB;;AAGA,MAAI,CAACH,OAAD,IACC,OAAOA,OAAP,KAAmB,QADpB,IAEC,CAACI,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAFN,EAE6B;AAC3B,WAAO;AAAEC,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,SAAS,EAATA;AAAZ,KAAP;AACD;;AAED,MAAMG,UAAU,GAAG,yBAAQN,OAAR,CAAnB;;AACAC,EAAAA,MAAM,CAACM,OAAP,CAAe,UAAAZ,IAAI,EAAI;AACpB,QAAIA,IAAI,CAACa,EAAT,EAAa;AACXN,MAAAA,QAAQ,CAACO,IAAT,CAAcd,IAAd;AACD,KAFD,MAEO;AACL,UAAMe,MAAM,GAAGJ,UAAU,CACtBK,IADY,CACPjB,SAAS,CAACC,IAAD,CADF,CAAf;;AAEA,UAAI,CAACe,MAAL,EAAa;AACXf,QAAAA,IAAI,CAACa,EAAL,GAAU,sBAAKI,oBAAKC,cAAV,CAAV;AACAX,QAAAA,QAAQ,CAACO,IAAT,CAAcd,IAAd;AACAQ,QAAAA,SAAS,CAACM,IAAV,CAAed,IAAf;AACD,OAJD,MAIO;AACLA,QAAAA,IAAI,CAACa,EAAL,GAAUE,MAAM,CAACF,EAAjB;AACAN,QAAAA,QAAQ,CAACO,IAAT,CAAcd,IAAd;AACD;AACF;AACH,GAfD;AAgBA,SAAO;AACLO,IAAAA,QAAQ,EAARA,QADK;AAELC,IAAAA,SAAS,EAATA;AAFK,GAAP;AAIF,CA/BD;;AAiCA,IAAMW,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA4B,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AAC1E,UAAIA,MAAM,CAACC,IAAP,KAAgBC,gBAAGC,gBAAvB,EAAyC;AACvC,YAAMC,QAAQ,GAAGC,sBAAWtB,MAAX,CAAkBc,QAAQ,EAA1B,CAAjB;;AACAG,QAAAA,MAAM,iCACDA,MADC,EAEDnB,SAAS,CAACuB,QAAD,EAAWJ,MAAM,CAACjB,MAAlB,CAFR,CAAN;AAID;;AACD,aAAOgB,IAAI,CAACC,MAAD,CAAX;AACD,KAT6D;AAAA,GAAhC;AAAA,CAA9B;;eAWeJ,qB","sourcesContent":["import { ACTION as NA } from '../note/actions'\r\nimport { sNoteLabel } from '../selectors'\r\nimport hmToArr from '../../utils/hmToArr'\r\nimport crId from './crId'\r\nimport CONF from '../appConf'\r\n\r\nconst _fIsLabel = (item) => _ =>\r\n  _.title === item.title\r\n  && _.color === item.color;\r\n\r\nconst _crLabels = (hmLabel, labels) => {\r\n   const labelsTo = []\r\n      , newLabels = [];\r\n\r\n   if (!hmLabel\r\n     || typeof hmLabel !== 'object'\r\n     || !Array.isArray(labels)) {\r\n     return { labelsTo, newLabels };\r\n   }\r\n\r\n   const _arrLabels = hmToArr(hmLabel);\r\n   labels.forEach(item => {\r\n      if (item.id) {\r\n        labelsTo.push(item)\r\n      } else {\r\n        const _label = _arrLabels\r\n          .find(_fIsLabel(item));\r\n        if (!_label) {\r\n          item.id = crId(CONF.NLABELS_PREFIX)\r\n          labelsTo.push(item)\r\n          newLabels.push(item)\r\n        } else {\r\n          item.id = _label.id\r\n          labelsTo.push(item)\r\n        }\r\n      }\r\n   })\r\n   return {\r\n     labelsTo,\r\n     newLabels\r\n   };\r\n};\r\n\r\nconst noteLabelIdMiddleware = ({ getState, dispatch }) => next => action => {\r\n  if (action.type === NA.EDIT_NOTE_LABELS) {\r\n    const hmLabels = sNoteLabel.labels(getState());    \r\n    action = {\r\n      ...action,\r\n      ..._crLabels(hmLabels, action.labels)\r\n    }\r\n  }\r\n  return next(action);\r\n}\r\n\r\nexport default noteLabelIdMiddleware\r\n"],"file":"noteLabelId.js"}