{"version":3,"sources":["../../../src/flux/__test__/reducerFns.test.js"],"names":["removeProp","fns","filterBy","filterByProp","setInObj","returnSame","expect","undefined","toBe","toEqual","describe","test","state","a","b","newState","id","m","title"],"mappings":"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","sourcesContent":["import fns from '../reducerFns'\r\n\r\nconst {\r\n  removeProp,\r\n  filterBy,\r\n  filterByProp,\r\n  setInObj\r\n} = fns;\r\n\r\nconst returnSame = ()=>{\r\n  expect(filterBy(undefined, 'a')).toBe(undefined)\r\n  expect(filterBy(null, 'a')).toBe(null)\r\n  expect(filterBy(true, 'a')).toBe(true)\r\n  expect(filterBy('abc', 'a')).toBe('abc')\r\n  expect(filterBy({}, 'a')).toEqual({})\r\n};\r\n\r\ndescribe('reducerFn removeProp', ()=>{\r\n  test('should remove prop from obj by prop name', ()=>{\r\n    const state = { a: 'a', b: 'b' }\r\n    , newState = removeProp(state, 'a');\r\n    expect(newState).toEqual({b: 'b'})\r\n    expect(state===newState).toBe(false)\r\n  })\r\n})\r\n\r\ndescribe('reducerFn filterBy', ()=>{\r\n  test('should filter array of string by str', ()=>{\r\n    const state = ['a', 'b']\r\n    , newState = filterBy(state, 'a');\r\n    expect(newState).toEqual(['b'])\r\n    expect(state===newState).toBe(false)\r\n  })\r\n  test('should return same in edge case', returnSame)\r\n})\r\n\r\ndescribe('reducerFn filterByProp',()=>{\r\n  test('should filter arr with obj by propValue with default propName id', ()=>{\r\n    const state = [{ id: '1', m: 'm1'},{ id: '2', m: 'm2'}]\r\n    , newState = filterByProp(state, '1');\r\n    expect(newState).toEqual([{ id: '2', m: 'm2'}])\r\n    expect(state===newState).toBe(false)\r\n  })\r\n\r\n  test('should filter arr with obj by propValue and propName', ()=>{\r\n    const state = [{ id: '1', m: 'm1'},{ id: '2', m: 'm2'}]\r\n    , newState = filterByProp(state, 'm1', 'm');\r\n    expect(newState).toEqual([{ id: '2', m: 'm2'}])\r\n    expect(state===newState).toBe(false)\r\n  })\r\n\r\n  test('should return same in edge case', returnSame)\r\n})\r\n\r\ndescribe('setInObj', ()=>{\r\n  test('should set in state by key object', ()=>{\r\n    const state = {}\r\n    , newState = setInObj(state, 'a', {title: 'a'});\r\n    expect(newState).toEqual({\r\n      a: {title: 'a'}\r\n    })\r\n    expect(state===newState).toBe(false)\r\n  })\r\n})\r\n"],"file":"reducerFns.test.js"}